<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DécouVerte</title>
  
  <subtitle>生命不息 折腾不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yluo.name/"/>
  <updated>2020-03-20T07:39:19.608Z</updated>
  <id>http://yluo.name/</id>
  
  <author>
    <name>Yang Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器人操作系统ROS学习笔记：TF坐标变换</title>
    <link href="http://yluo.name/2020/03/20/ros-tf/"/>
    <id>http://yluo.name/2020/03/20/ros-tf/</id>
    <published>2020-03-20T07:39:19.000Z</published>
    <updated>2020-03-20T07:39:19.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TF坐标变换"><a href="#TF坐标变换" class="headerlink" title="TF坐标变换"></a>TF坐标变换</h2><p>机器人中存在大量组件，各个组件之间都使用各自的相对坐标系，这些坐标系之间的变换往往十分复杂。ROS中为了方便维护这些坐标系之间的变换，提供了TF功能包。从图中也可以看出，PR2机器人上存在的坐标系十分繁杂。</p><p><img src="/images/ros_pr2_tf.png" alt="ros_pr2_tf"></p><h2 id="TF功能包"><a href="#TF功能包" class="headerlink" title="TF功能包"></a>TF功能包</h2><p>TF是一个让用户随时间跟踪多个坐标系的功能包，它使用树型数据结构，根据时间缓冲并维护多个坐标系之间的坐标变换关系。可以查询任意时间、任意坐标系之间坐标变换。</p><p>TF以时间为轴跟踪这些坐标系的变化，并且允许开发者请求如下类型的数据：</p><ul><li>5秒之前，机器人头部坐标系相对于全局坐标系的关系？</li><li>机器人夹取的物体相对于机器人中心坐标系的位置？</li><li>机器人中心坐标系相对于全局坐标位置？</li></ul><p>所有订阅TF消息的节点都会缓冲一份所有坐标系的变换关系数据，所以这种结构<strong>不需要中心服务器来存储任何数据</strong>。</p><p>使用TF功能包，需要以下步骤：</p><ul><li>监听TF变换(listenTransform)</li></ul><p>接收并缓存系统中发布的所有坐标变换数据，并从中查询所需要的坐标变换关系。</p><ul><li>广播TF变换(broadcastTransform)</li></ul><p>向系统中广播坐标系之间的坐标变换关系。系统中可能会存在多个不同部分的TF变换广播，每个广播都可以直接将坐标变换关系插入TF树中，不需要再进行同步。</p><h2 id="TF工具"><a href="#TF工具" class="headerlink" title="TF工具"></a>TF工具</h2><p>TF功能包中提供了丰富的终端工具来帮助开发者调试和创建TF变换。</p><ol><li><p>tf_monitor</p><p> 查看TF树中所有坐标系的<strong>发布状态</strong>，包括发布者、平均延迟、最大延迟等信息。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rosrun</span> tf tf_monitor</div><div class="line"><span class="variable">$tf_monitor</span></div></pre></td></tr></table></figure><p> 查看TF树中指定坐标系之间的<strong>发布状态</strong>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$tf_monitor</span> &lt;source_frame&gt; &lt;target_frame&gt;</div></pre></td></tr></table></figure></li><li><p>tf_echo</p><p> 查看指定坐标系之间的<strong>变换关系</strong>。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rosrun</span> tf tf_echo</div><div class="line"><span class="variable">$tf_echo</span> &lt;source_frame&gt; &lt;target_frame&gt;</div></pre></td></tr></table></figure></li><li><p>static_transform_publisher</p><p> 发布两个坐标系之间的静态坐标变换，这两个坐标系不发生相对位置变化。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$static_transform_publisher</span> x y z yaw pitch roll frame_id child_frame_id period_in_ms</div><div class="line"><span class="variable">$static_transform_publisher</span> x y z qx qy qz qw frame_id child_frame_id period_in_ms</div></pre></td></tr></table></figure><p> <code>period_in_ms</code>为发布频率，单位ms。该命令还可以在launch文件中使用：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"link1_broadcaster"</span> <span class="attr">pkg</span>=<span class="string">"tf"</span> <span class="attr">type</span>=<span class="string">"static_transform_publisher"</span> <span class="attr">args</span>=<span class="string">"1 0 0 0 0 0 1 link1_parent link1 100"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>view_frames</p><p> view_frames使可视化调试工具，可以生成pdf文件，显示TF树的信息。执行方式：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rosrun</span> tf view_frames</div></pre></td></tr></table></figure><p> 命令会生成frames.pdf文件，包含可视化的TF信息。</p></li><li><p>roswtf</p><p> roswtf可以分析当前的tf配置，并尝试分析其中的问题。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$roswtf</span></div></pre></td></tr></table></figure></li></ol><h2 id="TF消息类型"><a href="#TF消息类型" class="headerlink" title="TF消息类型"></a>TF消息类型</h2><p>TF默认发布的话题是<code>/tf</code>，消息类型是<code>tf2_msgs/TFMessage</code>，消息结构为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">geometry_msgs/TransformStamped[] transforms</div><div class="line">  std_msgs/Header header</div><div class="line">    uint32 seq</div><div class="line">    time stamp</div><div class="line">    string frame_id</div><div class="line">  string child_frame_id</div><div class="line">  geometry_msgs/Transform transform</div><div class="line">    geometry_msgs/Vector3 translation</div><div class="line">      float64 x</div><div class="line">      float64 y</div><div class="line">      float64 z</div><div class="line">    geometry_msgs/Quaternion rotation</div><div class="line">      float64 x</div><div class="line">      float64 y</div><div class="line">      float64 z</div><div class="line">      float64 w</div></pre></td></tr></table></figure><p>消息里存储着所有的坐标系变换信息，其中的<code>geometry_msgs/TransformStamped</code>为其中坐标系变换。</p><h2 id="robot-state-publisher功能包"><a href="#robot-state-publisher功能包" class="headerlink" title="robot_state_publisher功能包"></a>robot_state_publisher功能包</h2><p>robot_state_publisher提供了将关节(joint)位置信息转换为TF消息并发布的功能，可以利用URDF文件中的信息将机器人状态发布到<code>/tf</code>话题中去。</p><p>在launch文件中的使用方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Load the urdf into the parameter server. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"my_robot_description"</span> <span class="attr">textfile</span>=<span class="string">"$(find mypackage)/urdf/robotmodel.xml"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">type</span>=<span class="string">"robot_state_publisher"</span> <span class="attr">name</span>=<span class="string">"rob_st_pub"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"robot_description"</span> <span class="attr">to</span>=<span class="string">"my_robot_description"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"joint_states"</span> <span class="attr">to</span>=<span class="string">"different_joint_states"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TF坐标变换&quot;&gt;&lt;a href=&quot;#TF坐标变换&quot; class=&quot;headerlink&quot; title=&quot;TF坐标变换&quot;&gt;&lt;/a&gt;TF坐标变换&lt;/h2&gt;&lt;p&gt;机器人中存在大量组件，各个组件之间都使用各自的相对坐标系，这些坐标系之间的变换往往十分复杂。ROS中为了方便
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="ROS" scheme="http://yluo.name/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>机器人操作系统ROS学习笔记：URDF</title>
    <link href="http://yluo.name/2020/03/20/ros-urdf/"/>
    <id>http://yluo.name/2020/03/20/ros-urdf/</id>
    <published>2020-03-20T05:38:02.000Z</published>
    <updated>2020-03-20T05:39:27.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URDF"><a href="#URDF" class="headerlink" title="URDF"></a>URDF</h2><p>URDF(Unified Robot Description Format，统一机器人描述格式)是用来描述机器人模型的重要格式。URDF采用XML语言来描述机器人的模型。</p><h2 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h2><p>URDF采用一系列的嵌套标签来描述机器人的各个环节，比如<code>&lt;link&gt;</code>标签、<code>&lt;joint&gt;</code>标签、<code>&lt;robot&gt;</code>标签、<code>&lt;gazebo&gt;</code>标签等。</p><h3 id="lt-robot-gt-标签"><a href="#lt-robot-gt-标签" class="headerlink" title="&lt;robot&gt;标签"></a><code>&lt;robot&gt;</code>标签</h3><p><code>&lt;robot&gt;</code>标签是完整机器人模型的最顶层标签，<code>&lt;link&gt;</code>和<code>&lt;joint&gt;</code>等标签都必须作为子元素被包含在其内部。其基本语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"name_of_robot"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">link</span>&gt;</span>....<span class="tag">&lt;/<span class="name">link</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">joint</span>&gt;</span>...<span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div><div class="line"> ...</div><div class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="lt-link-gt-标签"><a href="#lt-link-gt-标签" class="headerlink" title="&lt;link&gt;标签"></a><code>&lt;link&gt;</code>标签</h3><p><code>&lt;link&gt;</code>标签用于描述机器人刚体部分的外观和物理属性，其元素包括外观元素(visual)、碰撞元素(collision)以及惯性元素(inertial)等。而外观元素下又包括位姿(origin)、几何(geometry)以及材料(material)等；碰撞元素下和外观元素类似，但没有材料；惯性元素下包括质量(mass)、位姿(origin)以及惯性矩阵(inertia)等。其结构大致如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"link_name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://meshes/base_link.stl"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"yellow"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">"$&#123;200/255&#125; $&#123;200/255&#125; $&#123;199/255&#125; 1.0"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">material</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">length</span>=<span class="string">"0.005"</span> <span class="attr">radius</span>=<span class="string">"0.13"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">inertia</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"5.0"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.00000322 0.17137541 0.17514843"</span> <span class="attr">rpy</span>=<span class="string">"0.0 0.0 0.0"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"0.13669961"</span> <span class="attr">ixy</span>=<span class="string">"0.00000038"</span> <span class="attr">ixz</span>=<span class="string">"-0.00000068"</span></span></div><div class="line"><span class="tag">                                    <span class="attr">iyy</span>=<span class="string">"0.14393633"</span> <span class="attr">iyz</span>=<span class="string">"-0.00049262"</span></span></div><div class="line"><span class="tag">                                                     <span class="attr">izz</span>=<span class="string">"0.01130291"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">inertia</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">link</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="lt-joint-gt-标签"><a href="#lt-joint-gt-标签" class="headerlink" title="&lt;joint&gt;标签"></a><code>&lt;joint&gt;</code>标签</h3><p><code>&lt;joint&gt;</code>标签用于描述机器人关节的运动学和动力学属性，包括关节运动的位置和速度限制。机器人关节运动形式共6种类型：</p><div class="table-container"><table><thead><tr><th style="text-align:left">关节类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">continuous</td><td style="text-align:left">旋转关节，可以绕单轴无限旋转，比如车轮关节</td></tr><tr><td style="text-align:left">revolute</td><td style="text-align:left">旋转关节，但有旋转的角度极限，比如机械臂关节</td></tr><tr><td style="text-align:left">prismatic</td><td style="text-align:left">滑动关节，沿某一轴线移动，带有位置极限，比如滑轨</td></tr><tr><td style="text-align:left">planar</td><td style="text-align:left">平面关节，允许在平面正交方向上平移或旋转</td></tr><tr><td style="text-align:left">floating</td><td style="text-align:left">浮动关节，允许平移、旋转运动</td></tr><tr><td style="text-align:left">fixed</td><td style="text-align:left">固定关节，不允许运动的特殊关节</td></tr></tbody></table></div><p>关节的作用是连接两个<code>&lt;link&gt;</code>，这两个<code>&lt;link&gt;</code>分别被称为<code>&lt;parent link&gt;</code>和<code>&lt;child link&gt;</code>。</p><p><img src="/images/ros_joint.png" alt="joint"></p><p>其结构大致如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_1"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.375"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"$&#123;prefix&#125;base_link"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"$&#123;prefix&#125;link_1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">"$&#123;radians(-180)&#125;"</span> <span class="attr">upper</span>=<span class="string">"$&#123;radians(180)&#125;"</span> <span class="attr">effort</span>=<span class="string">"126.0"</span> <span class="attr">velocity</span>=<span class="string">"$&#123;radians(435)&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dynamics</span> <span class="attr">damping</span>=<span class="string">"0.0"</span> <span class="attr">friction</span>=<span class="string">"0.0"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div></pre></td></tr></table></figure><p>关节下还可以包括一些其他属性：</p><ul><li><code>&lt;calibration&gt;</code>：关节参考位置，用来校准关节的绝对位置；</li><li><code>&lt;dynamic&gt;</code>：用于描述关节的物理属性，例如阻尼(damping)，摩擦力(friction)等，在动力学仿真中用到；</li><li><code>&lt;limit&gt;</code>：用于描述运动的极限值，包括上下限位置(lower,upper)，速度限制(velocity)，力矩限制(effort)；</li><li><code>&lt;mimic&gt;</code>：用于描述该关节与已有关节的关系；</li><li><code>&lt;safety_controller&gt;</code>：用于描述安全控制器参数。</li></ul><h3 id="lt-gazebo-gt-标签"><a href="#lt-gazebo-gt-标签" class="headerlink" title="&lt;gazebo&gt;标签"></a><code>&lt;gazebo&gt;</code>标签</h3><p><code>&lt;gazebo&gt;</code>标签用于描述机器人在Gazebo仿真中所需要的参数，包括机器人材料属性、Gazebo插件等。该标签不是机器人模型必须部分，只在Gazebo仿真中才需要。</p><p>其结构大致如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">"link_name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Orange<span class="tag">&lt;/<span class="name">material</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">turnGravityOff</span>&gt;</span>true<span class="tag">&lt;/<span class="name">turnGravityOff</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"gazebo_ros_control"</span> <span class="attr">filename</span>=<span class="string">"libgazebo_ros_control.so"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">legacyModeNS</span>&gt;</span>true<span class="tag">&lt;/<span class="name">legacyModeNS</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/myrobot<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">robotSimType</span>&gt;</span>gazebo_ros_control/DefaultRobotHWSim<span class="tag">&lt;/<span class="name">robotSimType</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="lt-transmission-gt-标签"><a href="#lt-transmission-gt-标签" class="headerlink" title="&lt;transmission&gt;标签"></a><code>&lt;transmission&gt;</code>标签</h3><p><code>&lt;transmission&gt;</code>标签用于描述驱动器和关节之间的关系。可以对齿轮传动比和并联结构等进行建模。传动可以完成指令和关节力的转换，保持功率恒定。多个驱动器可以通过复杂的传动连接到多个关节。</p><p>其结构大致如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">"transmission_name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/myrobot<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_name"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/PositionJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">"actuator_name"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>注意</strong>：<code>&lt;hardwareInterface&gt;</code>中定义了关节硬件接口，当在Gazebo中加载时应为EffortJointInterface。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;URDF&quot;&gt;&lt;a href=&quot;#URDF&quot; class=&quot;headerlink&quot; title=&quot;URDF&quot;&gt;&lt;/a&gt;URDF&lt;/h2&gt;&lt;p&gt;URDF(Unified Robot Description Format，统一机器人描述格式)是用来描述机器人模型的重要格
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="ROS" scheme="http://yluo.name/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>机器人操作系统ROS学习笔记：launch启动文件</title>
    <link href="http://yluo.name/2020/03/19/ros-launch/"/>
    <id>http://yluo.name/2020/03/19/ros-launch/</id>
    <published>2020-03-19T05:39:13.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="launch文件作用"><a href="#launch文件作用" class="headerlink" title="launch文件作用"></a>launch文件作用</h2><p>通过XML文件实现多节点的配置和启动。还可以自动启动ROS Master节点管理器（roscore），并可以实现每个节点的各种配置，为多个节点的操作提供便利。</p><h2 id="launch文件格式"><a href="#launch文件格式" class="headerlink" title="launch文件格式"></a>launch文件格式</h2><p>XML是一种可扩展标记语言（EXtensible Markup Language），靠一个个元素的嵌套构成。被设计为传输和存储数据，焦点是数据的内容。</p><h3 id="lt-launch-gt-标签"><a href="#lt-launch-gt-标签" class="headerlink" title="&lt;launch&gt;标签"></a><code>&lt;launch&gt;</code>标签</h3><p>XML文件必须包含一个根标签，launch文件的根标签采用<code>&lt;launch&gt;</code>，其他内容均包含在此标签中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="lt-node-gt-标签"><a href="#lt-node-gt-标签" class="headerlink" title="&lt;node&gt;标签"></a><code>&lt;node&gt;</code>标签</h3><p><code>&lt;node&gt;</code>用来启动ROS节点，相当于在终端执行<code>rosrun</code>，其语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"node-name"</span> <span class="attr">pkg</span>=<span class="string">"package-name"</span> <span class="attr">type</span>=<span class="string">"executable-name"</span> /&gt;</span></div></pre></td></tr></table></figure><p><code>name</code>属性定义节点运行的名称，将覆盖节点中<code>init()</code>赋予节点的名称；<code>pkg</code>定义节点所在功能包名称；<code>type</code>定义节点的可执行文件名称。</p><p>还有一些额外的属性：</p><ul><li><code>output=&quot;screen&quot;</code>:将节点标准输出打印到终端屏幕，默认输出为日志文档(log);</li><li><code>respawn=&quot;true&quot;</code>:复位属性，节点停止会自动重启，默认为<code>false</code>;</li><li><code>required=&quot;true&quot;</code>:必要节点，当该节点终止时，launch中其他节点也终止;</li><li><code>ns=&quot;namespace&quot;</code>:命名空间，为节点相对名称添加命名空间前缀;</li><li><code>args=&quot;arguments&quot;</code>:节点需要的输入参数，<strong>注意是<code>args</code>不是<code>arg</code>，<code>args</code>是node属性，<code>arg</code>是标签</strong>。</li></ul><h3 id="lt-arg-gt-标签"><a href="#lt-arg-gt-标签" class="headerlink" title="&lt;arg&gt;标签"></a><code>&lt;arg&gt;</code>标签</h3><p><code>&lt;arg&gt;</code>用于定义launch文件中的局部变量，仅可以在当前的launch中使用，便于launch文件重构。其语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"arg-name&gt;"</span> <span class="attr">default</span>=<span class="string">"arg-value"</span> /&gt;</span></div></pre></td></tr></table></figure><p><code>default</code>属性未给<code>&lt;arg&gt;</code>赋值时的默认值，launch文件需要<code>&lt;arg&gt;</code>定义的参数时，可以使用<code>$(arg arg-name)</code>的方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"foo"</span> <span class="attr">value</span>=<span class="string">"$(arg arg-name)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">"node"</span> <span class="attr">pkg</span>=<span class="string">"pkg"</span> <span class="attr">type</span>=<span class="string">"type"</span> <span class="attr">args</span>=<span class="string">"$(arg arg-name)"</span> /&gt;</span></div></pre></td></tr></table></figure><h3 id="lt-param-gt-标签"><a href="#lt-param-gt-标签" class="headerlink" title="&lt;param&gt;标签"></a><code>&lt;param&gt;</code>标签</h3><p><code>&lt;param&gt;</code>使运行时存储在ROS参数服务器中的参数，相当于全局变量，在launch文件执行后便加载到ROS参数服务器中。任何节点都可以通过<code>ros::param::get()</code>接口来获取paramter的值，也可以在终端通过<code>rosparam</code>指令来获取参数的值。其使用方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"param-name"</span> <span class="attr">value</span>=<span class="string">"param-value"</span> /&gt;</span></div></pre></td></tr></table></figure><p>运行之后在参数服务器中便会加载一个<code>param-name</code>的参数，其值被设置为<code>param-value</code>。为了解决很多参数同时加载的问题，ROS还同时提供了<code>&lt;rosparam&gt;</code>标签，可以一次性加载多个参数，其使用方法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"/path/to/package/config/params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"namespace"</span> /&gt;</span></div></pre></td></tr></table></figure><p><code>&lt;rosparam&gt;</code>将<code>params.yaml</code>文件中存储的参数全部加载到ROS的参数服务器中，需要设置<code>command</code>属性设置为<code>load</code>，而且可以设置命名空间，设置后，参数名称前缀会变为<code>/namespace/</code>。</p><h3 id="lt-remap-gt-标签"><a href="#lt-remap-gt-标签" class="headerlink" title="&lt;remap&gt;标签"></a><code>&lt;remap&gt;</code>标签</h3><p><code>&lt;remap&gt;</code>标签的目的是提供一种重映射机制，相当于给变量取别名。当在网上下载了一个功能包时，无法保证其接口和自己设计的接口一致，这时采用<code>&lt;remap&gt;</code>标签，可以不改动别人功能包接口的情况下，完成和自身功能包接口的通讯。</p><p>比如turtlebot的控制节点发布的速度指令话题是<code>/turtlebot/cmd_vel</code>，但我们自己设计的机器人订阅的速度控制话题是<code>myrobot/cmd_vel</code>，则可以在加载turtlebot速度控制节点时，利用<code>&lt;remap&gt;</code>标签将话题从<code>/turtlebot/cmd_vel</code>重映射到<code>/myrobot/cmd_vel</code>，便可以让自己的机器人接收速度指令了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"/turtlebot/cmd_vel"</span> <span class="attr">to</span>=<span class="string">"/myrobot/cmd_vel"</span> /&gt;</span></div></pre></td></tr></table></figure><p><strong>注意：ROS中重映射方式很多，使用也很广泛，也可以直接在终端进行重映射。</strong></p><h3 id="lt-include-gt-标签"><a href="#lt-include-gt-标签" class="headerlink" title="&lt;include&gt;标签"></a><code>&lt;include&gt;</code>标签</h3><p>在复杂系统中存在多个launch文件，互相之间也存在依赖。<code>&lt;include&gt;</code>标签可以包含其他launch文件，复用其中的内容，相当于C语言中include头文件。其使用方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"/path/to/file/other.launch"</span> /&gt;</span></div></pre></td></tr></table></figure><p>若在other.launch文件中存在需要赋值的<code>&lt;arg&gt;</code>标签等，则也可以如下调用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"/path/to/file/other.launch"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"other-arg-name"</span> <span class="attr">value</span>=<span class="string">"$(arg arg-name)"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>更多roslaunch的用法和标签元素可以通过访问<a href="https://wiki.ros.org/roslaunch" target="_blank" rel="external">https://wiki.ros.org/roslaunch</a>来学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;launch文件作用&quot;&gt;&lt;a href=&quot;#launch文件作用&quot; class=&quot;headerlink&quot; title=&quot;launch文件作用&quot;&gt;&lt;/a&gt;launch文件作用&lt;/h2&gt;&lt;p&gt;通过XML文件实现多节点的配置和启动。还可以自动启动ROS Master节点
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="ROS" scheme="http://yluo.name/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Linux目录树</title>
    <link href="http://yluo.name/2020/02/21/linux-dir/"/>
    <id>http://yluo.name/2020/02/21/linux-dir/</id>
    <published>2020-02-21T15:26:18.000Z</published>
    <updated>2020-03-19T05:28:59.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录树"><a href="#目录树" class="headerlink" title="目录树"></a>目录树</h2><p>在Linux下，所有文件与目录都是由根目录开始，然后一个个的分支下来，如树枝状。因此把这种目录配置方式称为<strong>目录树（Directory Tree）</strong>。Linux目录树主要有以下特征：</p><ul><li>目录树的起始点为根目录（/）；</li><li>每一个目录不只能使用本地端文件系统，也可以使用网络上的文件系统。可以利用Network File System（NFS）服务器挂载特定目录；</li><li>每一个文件在此目录树中的文件名（包含完整路径）都是独一无二的。</li></ul><h2 id="Linux目录配置"><a href="#Linux目录配置" class="headerlink" title="Linux目录配置"></a>Linux目录配置</h2><p>因为Linux有各式各样的版本，如果每个版本都采用不同的目录结构，则会对使用者造成很大的困扰。为了解决这个问题，提出了Filesystem Hierarchy Standard（FHS）标准，目前几乎所有的Linux版本目录配置均遵循FHS标准。</p><p>FHS标准其实就是规范了每个特定目录下应该放置什么样子的数据，这样使得不同的Linux系统保持目录架构基本一致，同时又可以根据有一些灵活配置。而使用者在不同Linux系统下切换更加容易。</p><h2 id="各个目录的功能"><a href="#各个目录的功能" class="headerlink" title="各个目录的功能"></a>各个目录的功能</h2><p>为了能够简单明了的表示各个目录的功能，做了一个目录树的图。从根目录开始，各个目录均存放对应类型的数据。</p><p> <img src="/images/linux_dir.svg" alt="Linux Directory Tree"></p><p>多说一句，除了FHS之外，还有一个Linux Standard Base（LSB）标准可以遵循。可以使用<code>lsb_release -a</code>查询目前的Linux发行版是否支持LSB标准。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录树&quot;&gt;&lt;a href=&quot;#目录树&quot; class=&quot;headerlink&quot; title=&quot;目录树&quot;&gt;&lt;/a&gt;目录树&lt;/h2&gt;&lt;p&gt;在Linux下，所有文件与目录都是由根目录开始，然后一个个的分支下来，如树枝状。因此把这种目录配置方式称为&lt;strong&gt;目录树（D
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="目录树" scheme="http://yluo.name/tags/%E7%9B%AE%E5%BD%95%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件权限</title>
    <link href="http://yluo.name/2020/02/18/linux-permission/"/>
    <id>http://yluo.name/2020/02/18/linux-permission/</id>
    <published>2020-02-18T14:08:18.000Z</published>
    <updated>2020-03-19T05:28:59.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux文件权限"><a href="#Linux文件权限" class="headerlink" title="Linux文件权限"></a>Linux文件权限</h2><p>在Linux终端下输入<code>ls -al</code>，可以看到当前文件夹下文件的详细信息，其通常的形式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rwxr--r-- 1 root  root  1864 May 4 18:00 initial-setup.cfg</div></pre></td></tr></table></figure><p>其中前10个字符<code>-rwxr--r--</code>便代表着文件类型与权限。</p><ul><li><p>第1个字符代表文件类型，<code>-</code>为文件，<code>d</code>为目录，<code>l</code>为链接，<code>b</code>表示设备文件中的可随机存取装置（U盘、硬盘等），<code>c</code>表示设备文件中的串行端口设备（鼠标、键盘等一次性读取装置）。</p></li><li><p>接下来的9个字符，每3个为一组，均为<code>rwx</code>的组合。<code>r</code>表示可读，<code>w</code>表示可写，<code>x</code>表示可执行，如果没有对应的权限，则对应位置为<code>-</code>。</p></li></ul><p>之所以会存在3组，是因为在Linux下文件的权限可分为<strong>文件拥有者的权限</strong>、<strong>文件所属群组的权限</strong>与<strong>其他人的权限</strong>。由于Linux系统是针对多用户设计的，这种分别是为了保证多用户场景下的数据安全。比如文件拥有者是小明，而小明是三年二班这个群组的班长，小明发布了一份公告文件，小明希望这份文件他自己可以查看和修改，所有班级成员都可以查看，但是其他班级的人不能够看到，则可以设置这个文件的权限为<code>rw- r-- ---</code>，这样的话，便满足了要求。</p><h2 id="文件权限修改"><a href="#文件权限修改" class="headerlink" title="文件权限修改"></a>文件权限修改</h2><p>Linux下的文件权限是与使用者、群组相关的，系统提供了三个用来修改文件权限的命令：</p><ul><li><code>chgrp</code>：改变文件所属群组；</li><li><code>chown</code>：改变文件拥有者；</li><li><code>chmod</code>：改变文件的读、写、执行权限。</li></ul><h3 id="改变群组chgrp"><a href="#改变群组chgrp" class="headerlink" title="改变群组chgrp"></a>改变群组chgrp</h3><p>用法：<code>chgrp [-R] FILE_OR_DIR</code>，其中<code>-R</code>为进行递归变更，常用在变更目录内所有文件权限。</p><h3 id="改变拥有者chown"><a href="#改变拥有者chown" class="headerlink" title="改变拥有者chown"></a>改变拥有者chown</h3><p>用法与<code>chgrp</code>类似：<code>chown [-R] USER:GROUP FILE_OR_DIR</code>，可以同时修改拥有者和群组，比较方便。</p><h3 id="改变权限chmod"><a href="#改变权限chmod" class="headerlink" title="改变权限chmod"></a>改变权限chmod</h3><p>权限的使用有两种方法，一种是利用数字类型改变文件权限，一种是利用符号类型改变文件权限。</p><p>对于数字类型改变权限，<code>rwx</code>三者对应的数值为<code>421</code>，因此3组权限可以用对应数值累加来计算权限，比如<code>rwxr-xr--</code>便可以用数字表示为<code>754</code>，因此设置权限为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod [-R] 754 FILE_OR_DIR</div></pre></td></tr></table></figure><p>对于符号类型改变权限，3组权限可由<code>ugo</code>分别代表user，group，others三种身份，此外<code>a</code>代表全部身份；而<code>rwx</code>则代表读写权限，因此设置权限为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod [-R] [ugoa] [+-=] [rwx] FILE_OR_DIR</div></pre></td></tr></table></figure><p>例如要设置一个文件权限为<code>-rwxr-xr-x</code>，则可以为<code>chmod u=rwx,go=rx FILE_OR_DIR</code>。此外，若不知道原先文件属性，只想增加每个人均可以写入的权限，则可以为<code>chmod a+w FILE_OR_DIR</code>。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li><p>对于文件来说，<code>w</code>权限代表可以编辑、新增或修改文件内容，但是不可以修改文件。</p></li><li><p>对于目录来说，<code>w</code>权限代表可以新建、删除、重命名目录与文件（与该目录下的文件名异动有关）；<code>x</code>代表可以进入目录成为工作目录，若目录权限中只有<code>r</code>而没有<code>x</code>，则无法进入该目录。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux文件权限&quot;&gt;&lt;a href=&quot;#Linux文件权限&quot; class=&quot;headerlink&quot; title=&quot;Linux文件权限&quot;&gt;&lt;/a&gt;Linux文件权限&lt;/h2&gt;&lt;p&gt;在Linux终端下输入&lt;code&gt;ls -al&lt;/code&gt;，可以看到当前文件夹下文
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="文件权限" scheme="http://yluo.name/tags/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>对科学问题的一点理解</title>
    <link href="http://yluo.name/2020/02/15/scientific-problem/"/>
    <id>http://yluo.name/2020/02/15/scientific-problem/</id>
    <published>2020-02-15T04:36:13.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是科学问题"><a href="#什么是科学问题" class="headerlink" title="什么是科学问题"></a>什么是科学问题</h2><p>在写基金或写论文的时候，我经常会纠结于<strong>什么是科学问题？</strong>，<strong>什么是工程问题？</strong>。我相信很多科研人员都会有这种困惑：到底什么才是科学问题？我谈一谈自己对科学问题的理解吧。</p><h2 id="科学问题的启发"><a href="#科学问题的启发" class="headerlink" title="科学问题的启发"></a>科学问题的启发</h2><p>有一天参加所里的学术会议，主任讲了一个很有意思的事，他有一次和机器人行业大佬孙立宁教授在酒席上，曾听孙教授说过一个关于<strong>科学问题</strong>的比喻：</p><blockquote><p>我说我要研究“人如何用筷子？”，这不是一个科学问题；<br>可是我要说“多自由度冗余关节的双刚体协同运动控制”，这就是一个科学问题。</p></blockquote><h2 id="我对科学问题的理解"><a href="#我对科学问题的理解" class="headerlink" title="我对科学问题的理解"></a>我对科学问题的理解</h2><p>这个事给了我很大的启发，让我自己对科学问题有了很直观的理解。在我的理解中，科学问题是：</p><blockquote><p>能够揭示规律、原理，同时具有抽象、泛化意义，能够对一类的事物都具有应用价值。</p></blockquote><p>可能我的总结不准确，但我想表达的是，科学问题并不是对现实世界的直观描述，需要看透现象本质，找寻背后的规律原理，通过总结提炼，才可以称之为<strong>科学问题</strong>。</p><p>就以孙立宁教授的例子为例，“人如何用筷子？”之所以不是科学问题，是因为这只是现实世界的直观描述，并没有深入现象本质。如何定义人？人有什么特点？筷子又是什么？有什么特点？人和筷子只是特定事物的名字而已。人用筷子，对人来说，可以抽象成多自由度冗余关节，因为在用筷子这件事中，<strong>人</strong>对外的表现就是<strong>多自由度冗余关节</strong>，而<strong>筷子</strong>就是<strong>双刚体</strong>，<strong>用筷子</strong>就是对双刚体的<strong>协同运动控制</strong>。</p><p>于是经过提炼，可以从现象表面发现现象本质，对<strong>多自由度冗余关节的双刚体协同运动控制</strong>进行研究，是可以推广到很多其他领域，比如多机械臂协同作业等，是具有很强的泛化抽象意义的。这种问题当然就是<strong>科学问题</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是科学问题&quot;&gt;&lt;a href=&quot;#什么是科学问题&quot; class=&quot;headerlink&quot; title=&quot;什么是科学问题&quot;&gt;&lt;/a&gt;什么是科学问题&lt;/h2&gt;&lt;p&gt;在写基金或写论文的时候，我经常会纠结于&lt;strong&gt;什么是科学问题？&lt;/strong&gt;，&lt;stro
      
    
    </summary>
    
      <category term="学术天地" scheme="http://yluo.name/categories/%E5%AD%A6%E6%9C%AF%E5%A4%A9%E5%9C%B0/"/>
    
    
      <category term="基金" scheme="http://yluo.name/tags/%E5%9F%BA%E9%87%91/"/>
    
      <category term="科学问题" scheme="http://yluo.name/tags/%E7%A7%91%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Bash下的快捷键</title>
    <link href="http://yluo.name/2020/02/14/bash-shortcuts/"/>
    <id>http://yluo.name/2020/02/14/bash-shortcuts/</id>
    <published>2020-02-14T15:12:46.000Z</published>
    <updated>2020-03-19T05:28:59.241Z</updated>
    
    <content type="html"><![CDATA[<p>使用Linux终端的一个重要的原则就是：不要让你的手指离开<strong>本位行</strong>，这对于一个程序员来说是十分重要的，之前由于不知道Bash下的快捷键，导致经常需要去利用方向键来调整命令输入，比如：已经输入了很长一段指令，结果发现必须要用管理员来运行，没办法，只能靠方向键一直将光标移至命令开头，然后敲上<code>sudo</code>，是不是很麻烦？于是乎，Bash下的快捷键就可以快速地帮助你，当你按下<code>&lt;C-a&gt;</code>或者<code>&lt;C-xx&gt;</code>时，便自动移动到了行首，随后便可以潇洒地输入<code>sudo</code>，飘逸地一个回车，把B装到了极致。</p><p>下面是一些终端命令快捷键的总结：</p><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><div class="table-container"><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;C-a&gt;</code>或<code>Home</code></td><td style="text-align:left">移动到行首</td></tr><tr><td style="text-align:left"><code>&lt;C-e&gt;</code>或<code>End</code></td><td style="text-align:left">移动到行尾</td></tr><tr><td style="text-align:left"><code>&lt;ALT-b&gt;</code></td><td style="text-align:left">后移一个单词</td></tr><tr><td style="text-align:left"><code>&lt;C-b&gt;</code></td><td style="text-align:left">后移一个字符</td></tr><tr><td style="text-align:left"><code>&lt;ALT-f&gt;</code></td><td style="text-align:left">前移一个单词</td></tr><tr><td style="text-align:left"><code>&lt;C-f&gt;</code></td><td style="text-align:left">前移一个字符</td></tr><tr><td style="text-align:left"><code>&lt;C-xx&gt;</code></td><td style="text-align:left">当前和行首位置切换</td></tr></tbody></table></div><h2 id="剪切删除"><a href="#剪切删除" class="headerlink" title="剪切删除"></a>剪切删除</h2><div class="table-container"><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;C-w&gt;</code></td><td style="text-align:left">剪切光标前单词</td></tr><tr><td style="text-align:left"><code>&lt;C-k&gt;</code></td><td style="text-align:left">剪切光标后内容移动到行尾</td></tr><tr><td style="text-align:left"><code>&lt;C-u&gt;</code></td><td style="text-align:left">剪切光标前内容</td></tr><tr><td style="text-align:left"><code>&lt;C-y&gt;</code></td><td style="text-align:left">粘贴剪切板内容</td></tr><tr><td style="text-align:left"><code>&lt;C-d&gt;</code></td><td style="text-align:left">删除当前字符</td></tr><tr><td style="text-align:left"><code>&lt;ALT-d&gt;</code></td><td style="text-align:left">删除光标后所有字符</td></tr><tr><td style="text-align:left"><code>&lt;C-h&gt;</code></td><td style="text-align:left">删除前一字符</td></tr></tbody></table></div><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><div class="table-container"><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;C-c&gt;</code></td><td style="text-align:left">终止当前进程</td></tr><tr><td style="text-align:left"><code>&lt;C-z&gt;</code></td><td style="text-align:left">挂起当前进程，可用<code>fg</code>恢复</td></tr><tr><td style="text-align:left"><code>&lt;C-d&gt;</code></td><td style="text-align:left">关闭shell，同<code>exit</code></td></tr></tbody></table></div><h2 id="屏幕控制"><a href="#屏幕控制" class="headerlink" title="屏幕控制"></a>屏幕控制</h2><div class="table-container"><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;C-l&gt;</code></td><td style="text-align:left">清屏，同<code>clear</code></td></tr><tr><td style="text-align:left"><code>&lt;C-s&gt;</code></td><td style="text-align:left">停止屏幕输出</td></tr><tr><td style="text-align:left"><code>&lt;C-q&gt;</code></td><td style="text-align:left">恢复屏幕输出</td></tr></tbody></table></div><h2 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h2><div class="table-container"><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;ALT-u&gt;</code></td><td style="text-align:left">大写光标位置到单词尾间的字母</td></tr><tr><td style="text-align:left"><code>&lt;ALT-l&gt;</code></td><td style="text-align:left">小写光标位置到单词尾间的字母</td></tr><tr><td style="text-align:left"><code>&lt;ALT-c&gt;</code></td><td style="text-align:left">大写当前单词</td></tr></tbody></table></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><div class="table-container"><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;ALT-T&gt;</code></td><td style="text-align:left">当前单词和前一单词互换</td></tr><tr><td style="text-align:left"><code>&lt;C-T&gt;</code></td><td style="text-align:left">互换光标前两单词位置</td></tr><tr><td style="text-align:left"><code>&lt;C-_&gt;</code></td><td style="text-align:left">撤销</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Linux终端的一个重要的原则就是：不要让你的手指离开&lt;strong&gt;本位行&lt;/strong&gt;，这对于一个程序员来说是十分重要的，之前由于不知道Bash下的快捷键，导致经常需要去利用方向键来调整命令输入，比如：已经输入了很长一段指令，结果发现必须要用管理员来运行，没办法
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="Bash" scheme="http://yluo.name/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>用Microsoft To Do做待办管理</title>
    <link href="http://yluo.name/2020/02/08/todo-intro/"/>
    <id>http://yluo.name/2020/02/08/todo-intro/</id>
    <published>2020-02-08T05:55:45.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<p>强烈安利一款软件：Microsoft To Do，用来实现待办事项管理。可以实现PC端、手机端的同步，实时管理和查看，十分方便。</p><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>在Microsoft Store中下载即可。</p><h2 id="手机端安装"><a href="#手机端安装" class="headerlink" title="手机端安装"></a>手机端安装</h2><p>在应用市场下载</p><h2 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h2><p>Linux下没有To Do的安装包，但是有一个开源软件Ao可以下载，在Github上可以下载。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;强烈安利一款软件：Microsoft To Do，用来实现待办事项管理。可以实现PC端、手机端的同步，实时管理和查看，十分方便。&lt;/p&gt;
&lt;h2 id=&quot;Windows下安装&quot;&gt;&lt;a href=&quot;#Windows下安装&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="To Do" scheme="http://yluo.name/tags/To-Do/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04下Terminator支持256色</title>
    <link href="http://yluo.name/2020/02/07/terminator-256color/"/>
    <id>http://yluo.name/2020/02/07/terminator-256color/</id>
    <published>2020-02-07T11:56:31.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在Ubuntu 16.04下利用<code>apt install terminator</code>安装Terminator后，其版本为0.98。而0.98版本的Terminator默认不支持256色，导致终端下无法显示很多颜色，看上去很难受。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>打开Terminator，在<code>Preferences</code>中选择<code>Profiles</code>；</li><li>在<code>Command</code>选项卡中，将<code>Run a custom command instead of my shell</code>选中；</li><li>在<code>Custom command</code> 中输入<code>TERM=xterm-256color bash -l</code></li></ol><p>随后重启Terminator，便可以看到已经支持256色，终端里显示出了更多的颜色，来区分不同的项目了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在Ubuntu 16.04下利用&lt;code&gt;apt install terminator&lt;/code&gt;安装Terminato
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Terminator" scheme="http://yluo.name/tags/Terminator/"/>
    
  </entry>
  
  <entry>
    <title>Windows Powershell运行自定义脚本</title>
    <link href="http://yluo.name/2020/02/05/powershell-run-script/"/>
    <id>http://yluo.name/2020/02/05/powershell-run-script/</id>
    <published>2020-02-05T13:35:53.000Z</published>
    <updated>2020-03-19T05:28:59.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Windows Powershell为了防止恶意脚本的执行，设计了一个执行策略(Execution Policy)，若发现自定义的脚本无法运行，则需要更改执行策略。</p><p>执行策略包括6种类型：</p><ul><li>Restricted 受限制的，只能执行单个命令，不能执行脚本</li><li>AllSigned 允许执行有数字签名的脚本</li><li>RemoteSigned 本地脚本可以运行，网络下载的需要数字签名</li><li>Unrestricted 无限制，但从网络下载的会有安全提示</li><li>Bypass 不设任何限制，且没有安全提示</li><li>Undefined 未设置策略，使用继承或默认策略</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>利用管理员身份打开Powershell终端，输入以下命令将策略更改为<code>RemoteSigned</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ Set-ExecutionPolicy RemoteSigned</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;Windows Powershell为了防止恶意脚本的执行，设计了一个执行策略(Execution Policy)，若发现自
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Windows" scheme="http://yluo.name/tags/Windows/"/>
    
      <category term="Powershell" scheme="http://yluo.name/tags/Powershell/"/>
    
  </entry>
  
  <entry>
    <title>Git利用rebase压缩多次commit</title>
    <link href="http://yluo.name/2020/02/05/git-rebase/"/>
    <id>http://yluo.name/2020/02/05/git-rebase/</id>
    <published>2020-02-05T13:19:59.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>有时我们提交到GitHub等远程仓库上的commit太多，想将多次提交的commit合并成一个commit。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以利用rebase来压缩多次commit。</p><h3 id="1-首先查看本地提交历史"><a href="#1-首先查看本地提交历史" class="headerlink" title="1. 首先查看本地提交历史"></a>1. 首先查看本地提交历史</h3><p>输入以下命令查看master分支的提交历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> <span class="built_in">log</span></div></pre></td></tr></table></figure><p>这里会显示master分支自创立以来的所有提交历史，现在假设要合并最近的4次提交。</p><h3 id="2-压缩最近4次提交"><a href="#2-压缩最近4次提交" class="headerlink" title="2. 压缩最近4次提交"></a>2. 压缩最近4次提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> rebase -i HEAD~4</div></pre></td></tr></table></figure><p>该命令执行后，会弹出默认编辑器的编辑窗口，4次提交的信息会倒序排列，最新的提交在最下面。</p><p>我们需要将其中第2~4行的第一个单词<code>pick</code>修改为<code>squash</code>这意味着将最后三次提交压缩到倒数第4次提交。随后保存。</p><h3 id="3-处理冲突"><a href="#3-处理冲突" class="headerlink" title="3. 处理冲突"></a>3. 处理冲突</h3><p>若有冲突，则会提示需要修改，修改后输入以下命令保存此次压缩：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> add .</div><div class="line"><span class="variable">$git</span> rebase --<span class="built_in">continue</span></div></pre></td></tr></table></figure><p>如果想要放弃此次压缩，则输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> rebase --abort</div></pre></td></tr></table></figure><h3 id="4-修改描述信息"><a href="#4-修改描述信息" class="headerlink" title="4. 修改描述信息"></a>4. 修改描述信息</h3><p>若没有冲突处理，则会直接跳转到修改描述信息的位置，可以修改此次压缩后的commit描述。随后保存。</p><h3 id="5-提交到远程仓库"><a href="#5-提交到远程仓库" class="headerlink" title="5. 提交到远程仓库"></a>5. 提交到远程仓库</h3><p>修改完描述信息后便已经完成了提交，若想要推送的远程仓库，则需要覆盖之前的提交，需要强制推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$git</span> push -f</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;有时我们提交到GitHub等远程仓库上的commit太多，想将多次提交的commit合并成一个commit。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Git" scheme="http://yluo.name/tags/Git/"/>
    
      <category term="小技巧" scheme="http://yluo.name/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu蓝牙不可用</title>
    <link href="http://yluo.name/2020/02/03/ubuntu-bluetooth-disabled/"/>
    <id>http://yluo.name/2020/02/03/ubuntu-bluetooth-disabled/</id>
    <published>2020-02-03T02:43:10.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>之前在Ubuntu下不小心删除了<code>/var/lib/bluetooth/</code>下的文件夹，导致蓝牙界面一直显示disabled。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在终端里输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$rfkill</span> unblock bluetooth</div></pre></td></tr></table></figure><p>随后重启系统并打开蓝牙，蓝牙便显示enabled了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;之前在Ubuntu下不小心删除了&lt;code&gt;/var/lib/bluetooth/&lt;/code&gt;下的文件夹，导致蓝牙界面一直
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="Bluetooth" scheme="http://yluo.name/tags/Bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>Windows无法进入睡眠</title>
    <link href="http://yluo.name/2020/02/03/windows-sleep/"/>
    <id>http://yluo.name/2020/02/03/windows-sleep/</id>
    <published>2020-02-03T02:28:25.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>自己家的台式机在接通电源的情况下点击开始菜单-&gt;电源-&gt;睡眠，依然无法睡眠，会始终自动唤醒。这是由于Windows开启了<strong>离开模式</strong>(Away Mode)，一般来说能够改变到离开模式的软件主要有：</p><ul><li><strong>迅雷</strong>：离开模式下载；</li><li><strong>百度网盘</strong>：传输时不休眠。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>按<code>WIN</code>+<code>R</code>打开<strong>运行</strong></li><li>输入<code>regedit</code>打开注册表编辑器</li><li>定位到<strong>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SessionManager\Power</strong>，在右侧找到<code>AwayModeEnabled</code>，若其值为1时表示处于离开模式，无法正常睡眠，将其值改为0即可正常睡眠。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;自己家的台式机在接通电源的情况下点击开始菜单-&amp;gt;电源-&amp;gt;睡眠，依然无法睡眠，会始终自动唤醒。这是由于Window
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Windows" scheme="http://yluo.name/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Nvidia显卡驱动</title>
    <link href="http://yluo.name/2020/02/02/ubuntu-install-nvidia-driver/"/>
    <id>http://yluo.name/2020/02/02/ubuntu-install-nvidia-driver/</id>
    <published>2020-02-02T15:54:41.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<p>通常Ubuntu默认安装的显卡驱动是Nouveau，而为了发挥显卡的最大性能，或者为了给Nvidia显卡安装cuda驱动，都需要将显卡驱动更换为Nvidia的官方驱动。有两种方法：</p><h2 id="简单安装"><a href="#简单安装" class="headerlink" title="简单安装"></a>简单安装</h2><p>若显卡较老的话一般Ubuntu自己的源便会提供驱动，在系统的Additional Driver中选择相应的驱动安装即可，一般写着tested的驱动都是经过测试的，比较稳定。</p><h2 id="自行安装"><a href="#自行安装" class="headerlink" title="自行安装"></a>自行安装</h2><p>若显卡较新的话，Ubuntu自己的源很多时候没有相应的驱动，这时候就需要去Nvidia的官网下载对应的驱动包，比如我现在的电脑显卡是Quadra P1000，我要去Nvidia的官网上下载Linux的驱动安装包，命名通常为NVIDIA-Linux-x86_64-440.44.run，将文件下载到系统中，随后便开始安装</p><h3 id="1-禁用Nouveau"><a href="#1-禁用Nouveau" class="headerlink" title="1. 禁用Nouveau"></a>1. 禁用Nouveau</h3><p>在<code>/etc/modprobe.d/blacklist.conf</code>文件的最后一行加上一句话：<code>blacklist nouveau</code>，将Nouveau加入黑名单，保存后输入如下指令生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> update-initramfs -u</div></pre></td></tr></table></figure><h3 id="2-重启电脑进入命令行界面"><a href="#2-重启电脑进入命令行界面" class="headerlink" title="2. 重启电脑进入命令行界面"></a>2. 重启电脑进入命令行界面</h3><p>重启之后，可以在登录界面或者进入系统之后，按<code>ctrl</code>+<code>alt</code>+<code>F1</code>进入命令行界面</p><h3 id="3-关闭桌面服务"><a href="#3-关闭桌面服务" class="headerlink" title="3. 关闭桌面服务"></a>3. 关闭桌面服务</h3><p>在命令行界面下输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> service lightdm stop</div></pre></td></tr></table></figure><h3 id="4-安装Nvidia驱动"><a href="#4-安装Nvidia驱动" class="headerlink" title="4. 安装Nvidia驱动"></a>4. 安装Nvidia驱动</h3><p>进入驱动安装包下载位置，首先赋予其执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$chmod</span> +x NVIDIA-Linux-x86_64-440.44.run</div></pre></td></tr></table></figure><p>随后运行并按照提示安装即可（通常用默认选项即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> ./NVIDIA-Linux-x86_64-440.44.run</div></pre></td></tr></table></figure><h3 id="5-验证安装"><a href="#5-验证安装" class="headerlink" title="5.验证安装"></a>5.验证安装</h3><p>安装完成后输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> nvidia-smi</div></pre></td></tr></table></figure><p>若列出了GPU的信息列表则表示安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常Ubuntu默认安装的显卡驱动是Nouveau，而为了发挥显卡的最大性能，或者为了给Nvidia显卡安装cuda驱动，都需要将显卡驱动更换为Nvidia的官方驱动。有两种方法：&lt;/p&gt;
&lt;h2 id=&quot;简单安装&quot;&gt;&lt;a href=&quot;#简单安装&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="Nvidia" scheme="http://yluo.name/tags/Nvidia/"/>
    
  </entry>
  
  <entry>
    <title>thinkpad-p52-ubuntu-install.md</title>
    <link href="http://yluo.name/2020/02/02/thinkpad-p52-ubuntu-install/"/>
    <id>http://yluo.name/2020/02/02/thinkpad-p52-ubuntu-install/</id>
    <published>2020-02-02T15:45:09.000Z</published>
    <updated>2020-03-19T05:28:59.241Z</updated>
    
    <content type="html"><![CDATA[<p>最近弄了一台Thinkpad P52移动工作站，想在上面安装Windows 10和Ubuntu 16.04作为双系统，但是安装Ubuntu时会出现一个提示：”The system is in low graphic mode”，之后便卡住了，无法安装。后来一顿尝试才发现，这是由于Thinkpad的核显与独显冲突造成的，需要在主板BIOS里禁用核显。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>开机按<code>Enter</code>进入BIOS配置，随后按<code>F1</code>进入BIOS Setup，在Config菜单下选择Display菜单打开，第二项Graphic Device选项中，选择<code>Discrete Graphics</code>，随后保存退出，便实现了核显的禁用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近弄了一台Thinkpad P52移动工作站，想在上面安装Windows 10和Ubuntu 16.04作为双系统，但是安装Ubuntu时会出现一个提示：”The system is in low graphic mode”，之后便卡住了，无法安装。后来一顿尝试才发现，这
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>机器人操作系统ROS学习笔记：Gazebo的更新与配置</title>
    <link href="http://yluo.name/2020/02/02/gazebo-upgrade/"/>
    <id>http://yluo.name/2020/02/02/gazebo-upgrade/</id>
    <published>2020-02-02T14:04:25.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<p>由于Gazebo随ROS一起安装的版本通常不是当前ROS版本下最新的，因此可以通过手动升级的方式来将Gazebo更新为当前ROS版本下对应的最新版本。</p><h2 id="查看当前Gazebo版本"><a href="#查看当前Gazebo版本" class="headerlink" title="查看当前Gazebo版本"></a>查看当前Gazebo版本</h2><p>输入以下命令查看当前Gazebo版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$gazebo</span> -v</div></pre></td></tr></table></figure><h2 id="升级方法"><a href="#升级方法" class="headerlink" title="升级方法"></a>升级方法</h2><p>执行以下命令升级Gazebo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> sh -c <span class="string">'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" &gt; /etc/apt/sources.list.d/gazebo-stable.list'</span></div><div class="line"><span class="variable">$wget</span> http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -</div><div class="line"><span class="variable">$sudo</span> apt-get update</div><div class="line"><span class="variable">$sudo</span> apt-get install gazebo7</div></pre></td></tr></table></figure><p>以Ubuntu 16.04 + ROS Kinetic为例，默认情况下Gazebo的版本为7.0.0，在更新完之后Gazebo的版本便成为7.16.0。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于Gazebo随ROS一起安装的版本通常不是当前ROS版本下最新的，因此可以通过手动升级的方式来将Gazebo更新为当前ROS版本下对应的最新版本。&lt;/p&gt;
&lt;h2 id=&quot;查看当前Gazebo版本&quot;&gt;&lt;a href=&quot;#查看当前Gazebo版本&quot; class=&quot;head
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="ROS" scheme="http://yluo.name/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu开机自动挂载硬盘</title>
    <link href="http://yluo.name/2020/01/20/ubuntu-mount/"/>
    <id>http://yluo.name/2020/01/20/ubuntu-mount/</id>
    <published>2020-01-20T01:11:36.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<p>平时我使用Windows和Linux作为主力双系统，额外采用一块固态硬盘作为数据盘，为了在Linux下使用方便，需要开机自动便将硬盘挂在到/home目录下。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-查看硬盘信息"><a href="#1-查看硬盘信息" class="headerlink" title="1.查看硬盘信息"></a>1.查看硬盘信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> fdisk -l</div></pre></td></tr></table></figure><p>其显示信息大致如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Device     Boot Start        End    Sectors  Size Id Type</div><div class="line">/dev/sda1        2048 1000212479 1000210432  477G  7 HPFS/NTFS/exFAT</div></pre></td></tr></table></figure><p>如果有多个设备，则会显示多个类似信息。</p><h3 id="2-创建需要挂载的目录"><a href="#2-创建需要挂载的目录" class="headerlink" title="2. 创建需要挂载的目录"></a>2. 创建需要挂载的目录</h3><p>我希望将硬盘挂载到用户目录下，因此在用户目录下建立<code>SSD/</code>文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> mkdir ~/SSD/</div></pre></td></tr></table></figure><h3 id="3-查看磁盘分区的UUID"><a href="#3-查看磁盘分区的UUID" class="headerlink" title="3. 查看磁盘分区的UUID"></a>3. 查看磁盘分区的UUID</h3><p>输入以下指令查看<code>/dev/sda1</code>的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> blkid</div></pre></td></tr></table></figure><p>其显示信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/sda1: LABEL=<span class="string">"SSD"</span> UUID=<span class="string">"C28070388070354F"</span> TYPE=<span class="string">"ntfs"</span> PARTUUID=<span class="string">"40ae352f-01"</span></div></pre></td></tr></table></figure><p>其中<code>UUID=&quot;C28070388070354F&quot;</code>便是挂载硬盘的UUID， 其文件系统格式为ntfs。</p><h3 id="4-配置开机自动挂载"><a href="#4-配置开机自动挂载" class="headerlink" title="4. 配置开机自动挂载"></a>4. 配置开机自动挂载</h3><p>在<code>/etc/fstab</code>文件中加入如下分区信息，让其开机自动挂载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UUID=C28070388070354F /home/think/SSD ntfs defaults 0 0</div></pre></td></tr></table></figure><p>说明：其格式为 <strong>&lt;分区定位&gt;</strong> + <strong>&lt;挂载点位置&gt;</strong> + <strong>&lt;挂载磁盘类型&gt;</strong> + <strong>&lt;挂载参数&gt;</strong> + <strong><dump备份></dump备份></strong> + <strong>&lt;磁盘检查&gt;</strong>，</p><ul><li><strong>分区定位</strong>，可以为UUID或LABEL；</li><li><strong>挂载点位置</strong>，想要挂载硬盘的位置；</li><li><strong>挂载磁盘类型</strong>，文件系统类型，<code>auto</code>, <code>ext4</code>, <code>ntfs</code>；</li><li><strong>挂载参数</strong>， 通常为<code>defaults</code>，还可设置为<code>auto</code>, <code>ro</code>, <code>rw</code>；</li><li><strong>dump备份</strong>，dump工具决定何时备份，0表示忽略，1表示备份。通常为0；</li><li><strong>磁盘检查</strong>，决定文件系统检查顺序， 0表示检查，1表示最高优先权， 2表示其他所有需要被检查的设备。</li></ul><h3 id="5-挂载硬盘"><a href="#5-挂载硬盘" class="headerlink" title="5. 挂载硬盘"></a>5. 挂载硬盘</h3><p>执行完之前的步骤已经可以在开机自动挂载了，若想手动挂载也很方便，只需要输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> mount -a</div></pre></td></tr></table></figure><p>这样便可根据<code>/etc/fstab</code>文件中的顺序挂载所有设备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时我使用Windows和Linux作为主力双系统，额外采用一块固态硬盘作为数据盘，为了在Linux下使用方便，需要开机自动便将硬盘挂在到/home目录下。&lt;/p&gt;
&lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="小技巧" scheme="http://yluo.name/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程：echo指令</title>
    <link href="http://yluo.name/2020/01/19/shell-echo/"/>
    <id>http://yluo.name/2020/01/19/shell-echo/</id>
    <published>2020-01-19T15:57:54.000Z</published>
    <updated>2020-01-20T00:57:58.176Z</updated>
    
    <content type="html"><![CDATA[<p><code>echo</code>命令用于在终端打印一行文本，例如，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> this is a <span class="built_in">test</span></div><div class="line">this is a <span class="built_in">test</span></div></pre></td></tr></table></figure><p>经常使用的参数如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">-n</td><td style="text-align:left">不输出结尾换行符</td></tr><tr><td style="text-align:left">-e</td><td style="text-align:left">启用反斜杠转义的解释</td></tr><tr><td style="text-align:left">-E</td><td style="text-align:left">不启用反斜杠转义的解释（默认）</td></tr></tbody></table></div><p>若采用<code>-e</code>， 则下列转义字符将被解释：</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">\\</td><td style="text-align:left">不输出结尾换行符</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格 backspace</td></tr><tr><td style="text-align:left">\c</td><td style="text-align:left">不再输出后面内容</td></tr><tr><td style="text-align:left">\e</td><td style="text-align:left">退出 escape</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">退格 backspace</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">换行</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">水平tab</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">垂直tab</td></tr><tr><td style="text-align:left">\0NNN</td><td style="text-align:left">八进制NNN</td></tr><tr><td style="text-align:left">\xHH</td><td style="text-align:left">16进制HH</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;echo&lt;/code&gt;命令用于在终端打印一行文本，例如，&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cl
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yluo.name/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程：who指令</title>
    <link href="http://yluo.name/2020/01/19/shell-who/"/>
    <id>http://yluo.name/2020/01/19/shell-who/</id>
    <published>2020-01-19T15:37:36.000Z</published>
    <updated>2020-03-20T00:40:49.948Z</updated>
    
    <content type="html"><![CDATA[<p><code>who</code>命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</p><p>经常使用的参数如下：</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">-H, —heading</td><td style="text-align:left">显示各栏的列标题</td></tr><tr><td style="text-align:left">-b, —boot</td><td style="text-align:left">最后一次系统启动时间</td></tr><tr><td style="text-align:left">-d, —dead</td><td style="text-align:left">死进程</td></tr><tr><td style="text-align:left">-l, —login</td><td style="text-align:left">系统登陆进程</td></tr><tr><td style="text-align:left">-p, —process</td><td style="text-align:left">激活进程</td></tr><tr><td style="text-align:left">-r, —runlevel</td><td style="text-align:left">当前运行级别</td></tr><tr><td style="text-align:left">-t, —time</td><td style="text-align:left">显示最后一次系统时钟改动</td></tr><tr><td style="text-align:left">-T, -w, —mesg</td><td style="text-align:left">加入用户信息状态 + - ?</td></tr><tr><td style="text-align:left">-u, —user</td><td style="text-align:left">列出登陆用户</td></tr><tr><td style="text-align:left">-a 或 —all</td><td style="text-align:left">显示全部信息 -b -d -l -p -r -t -T -u</td></tr></tbody></table></div><h2 id="获取本人信息"><a href="#获取本人信息" class="headerlink" title="获取本人信息"></a>获取本人信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$who</span> am i</div><div class="line">think    pts/18     2020-01-19 23:35 (:0)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;who&lt;/code&gt;命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。&lt;/p&gt;
&lt;p&gt;经常使用的参数如下：&lt;/p&gt;
&lt;div class=&quot;table-contain
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yluo.name/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell编程：date指令</title>
    <link href="http://yluo.name/2020/01/19/shell-date/"/>
    <id>http://yluo.name/2020/01/19/shell-date/</id>
    <published>2020-01-19T13:37:54.000Z</published>
    <updated>2020-01-20T01:21:26.529Z</updated>
    
    <content type="html"><![CDATA[<p><code>date</code>命令用于显示当前的日期及时间，直接运行可得到如下格式的显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ date</div><div class="line">Sun Jan 19 21:42:52 CST 2020</div></pre></td></tr></table></figure><p>可以在命令后添加参数以设定输出格式(<code>date [OPTION]... [+FORMAT]</code>)，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ date +%Y%m%d</div><div class="line">20200119</div></pre></td></tr></table></figure><p>常用的格式参数如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">%H</td><td style="text-align:left">小时(00~23)</td></tr><tr><td style="text-align:left">%I</td><td style="text-align:left">小时(01~12)</td></tr><tr><td style="text-align:left">%M</td><td style="text-align:left">分(00~59)</td></tr><tr><td style="text-align:left">%m</td><td style="text-align:left">月(01~12)</td></tr><tr><td style="text-align:left">%p</td><td style="text-align:left">显示AM或PM</td></tr><tr><td style="text-align:left">%r</td><td style="text-align:left">时间(hh:mm:ss)</td></tr><tr><td style="text-align:left">%S</td><td style="text-align:left">秒(00~59)</td></tr><tr><td style="text-align:left">%s</td><td style="text-align:left">从1970-01-01 00:00:00 UTC开始到现在的秒数</td></tr><tr><td style="text-align:left">%T</td><td style="text-align:left">24小时制时间 %H:%M:%S</td></tr><tr><td style="text-align:left">%X</td><td style="text-align:left">按照当前系统时间格式显示当前时间</td></tr><tr><td style="text-align:left">%x</td><td style="text-align:left">按照当前系统日期格式显示当前日期</td></tr><tr><td style="text-align:left">%Z</td><td style="text-align:left">时区</td></tr><tr><td style="text-align:left">%a</td><td style="text-align:left">星期简称(Sun)</td></tr><tr><td style="text-align:left">%A</td><td style="text-align:left">星期全称(Sunday)</td></tr><tr><td style="text-align:left">%b</td><td style="text-align:left">月的简称(Dec)</td></tr><tr><td style="text-align:left">%B</td><td style="text-align:left">月的全称(December)</td></tr><tr><td style="text-align:left">%c</td><td style="text-align:left">日期和时间(Sun 19 Jan 2020 10:06:36 PM CST)</td></tr><tr><td style="text-align:left">%d</td><td style="text-align:left">一个月的第几天(01~31)</td></tr><tr><td style="text-align:left">%D</td><td style="text-align:left">日期(mm/dd/yy)</td></tr><tr><td style="text-align:left">%w</td><td style="text-align:left">一个星期的第几天(0代表Sunday)</td></tr><tr><td style="text-align:left">%W</td><td style="text-align:left">一年的第几个星期(01~53)，星期一为第一天</td></tr><tr><td style="text-align:left">%y</td><td style="text-align:left">年的最后两位(20)</td></tr><tr><td style="text-align:left">%Y</td><td style="text-align:left">年(2020)</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;date&lt;/code&gt;命令用于显示当前的日期及时间，直接运行可得到如下格式的显示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="技术探索" scheme="http://yluo.name/categories/%E6%8A%80%E6%9C%AF%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="Linux" scheme="http://yluo.name/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yluo.name/tags/Shell/"/>
    
  </entry>
  
</feed>
